name: Pictive Posts API Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'Pictive-Posts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Pictive-Posts/**'
  workflow_dispatch:  # Allows manual triggering

env:
  ACR_NAME: pictiveacr
  AKS_NAME: Pictive-AKS
  AKS_RESOURCE_GROUP: Pictive-RG
  PORT: 3001

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'post-api/package-lock.json'

      - name: Install dependencies
        working-directory: post-api
        run: npm install

      - name: Run tests
        working-directory: post-api
        run: npm run test

      - name: Build application
        working-directory: post-api
        run: npm run build

  deploy:
    name: Deploy
    needs: validate
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Docker image
        working-directory: post-api
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/pictive-posts:${{ github.sha }} .
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/pictive-posts:latest .
          docker push ${{ env.ACR_NAME }}.azurecr.io/pictive-posts:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/pictive-posts:latest

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
            --name ${{ env.AKS_NAME }}

      - name: Create Kubernetes namespace and secrets
        run: |
          # Create namespace
          kubectl create namespace pictive || true
          
          # Create secrets
          kubectl create secret generic posts-db-secret \
            --namespace pictive \
            --from-literal=mongo-url='${{ secrets.MONGO_URL }}' \
            --from-literal=mongo-password='${{ secrets.MONGO_PASSWORD }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to AKS
        run: |
          # Apply the deployment and wait for it to be ready
          kubectl apply -f k8s/posts-deployment.yaml
          
          # Wait for the deployment to be created
          echo "Waiting for deployment to be created..."
          sleep 10
          
          # Verify deployment exists
          if ! kubectl get deployment pictive-posts -n pictive; then
            echo "Deployment not found, creating it..."
            kubectl create -f k8s/posts-deployment.yaml
          fi
          
          # Update the image in the deployment
          echo "Updating deployment image..."
          kubectl set image deployment/pictive-posts \
            pictive-posts=${{ env.ACR_NAME }}.azurecr.io/pictive-posts:${{ github.sha }} \
            -n pictive

          # Verify deployment
          echo "Verifying deployment..."
          kubectl rollout status deployment/pictive-posts -n pictive
          
          # Show deployment status
          echo "Deployment status:"
          kubectl get pods -n pictive
          kubectl get services -n pictive 