name: Pictive Posts API Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'Pictive-Posts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Pictive-Posts/**'
  workflow_dispatch:  # Allows manual triggering

env:
  ACR_LOGIN_SERVER: pictiveacr.azurecr.io
  AKS_NAME: Pictive-AKS
  AKS_RESOURCE_GROUP: Pictive-RG
  PORT: 3001

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'post-api/package-lock.json'

      - name: Install dependencies
        working-directory: post-api
        run: npm install

      - name: Run tests
        working-directory: post-api
        run: npm run test

      - name: Build application
        working-directory: post-api
        run: npm run build

  deploy:
    name: Deploy
    needs: validate
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Docker image
        working-directory: post-api
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/pictive-posts:${{ github.sha }} .
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/pictive-posts:latest .
          docker push ${{ env.ACR_LOGIN_SERVER }}/pictive-posts:${{ github.sha }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/pictive-posts:latest

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
            --name ${{ env.AKS_NAME }}

      - name: Create Kubernetes namespace and secrets
        run: |
          # Create namespace
          kubectl create namespace pictive --dry-run=client -o yaml | kubectl apply -f -
          
          # Create secrets
          kubectl create secret generic posts-db-secret \
            --namespace pictive \
            --from-literal=mongo-url='${{ secrets.MONGO_URL }}' \
            --from-literal=mongo-password='${{ secrets.MONGO_PASSWORD }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to AKS
        run: |
          # Create namespace if it doesn't exist
          echo "Ensuring namespace exists..."
          kubectl create namespace pictive --dry-run=client -o yaml | kubectl apply -f -
          
          # Delete existing deployment if it exists
          echo "Cleaning up existing deployment..."
          kubectl delete deployment pictive-posts -n pictive --ignore-not-found=true
          
          # Create deployment manifest
          echo "Creating deployment manifest..."
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: pictive-posts
            labels:
              app: pictive-posts
          spec:
            replicas: 2
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            selector:
              matchLabels:
                app: pictive-posts
            template:
              metadata:
                labels:
                  app: pictive-posts
              spec:
                containers:
                - name: pictive-posts
                  image: ${{ env.ACR_LOGIN_SERVER }}/pictive-posts:${{ github.sha }}
                  ports:
                  - containerPort: 3001
                  env:
                  - name: MONGO_URL
                    valueFrom:
                      secretKeyRef:
                        name: posts-db-secret
                        key: mongo-url
                  - name: MONGO_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: posts-db-secret
                        key: mongo-password
                  resources:
                    requests:
                      memory: "512Mi"
                      cpu: "100m"
                    limits:
                      memory: "1Gi"
                      cpu: "500m"
                  livenessProbe:
                    httpGet:
                      path: /api/health
                      port: 3001
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /api/health
                      port: 3001
                    initialDelaySeconds: 15
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  startupProbe:
                    httpGet:
                      path: /api/health
                      port: 3001
                    initialDelaySeconds: 15
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 30
                  lifecycle:
                    preStop:
                      exec:
                        command: ["/bin/sh", "-c", "sleep 10"]
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: pictive-posts-service
          spec:
            type: LoadBalancer
            selector:
              app: pictive-posts
            ports:
            - port: 3001
              targetPort: 3001
          ---
          apiVersion: autoscaling/v2
          kind: HorizontalPodAutoscaler
          metadata:
            name: pictive-posts-hpa
          spec:
            scaleTargetRef:
              apiVersion: apps/v1
              kind: Deployment
              name: pictive-posts
            minReplicas: 2
            maxReplicas: 5
            metrics:
            - type: Resource
              resource:
                name: cpu
                target:
                  type: Utilization
                  averageUtilization: 70
          EOF
          
          # Wait for the deployment to be ready
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Show all resources
          echo "Showing all resources..."
          kubectl get all -n pictive
          
          # Get deployment name
          echo "Getting deployment name..."
          DEPLOYMENT_NAME=$(kubectl get deployments -n pictive -o jsonpath='{.items[0].metadata.name}')
          echo "Deployment name: $DEPLOYMENT_NAME"
          
          # Verify deployment
          echo "Verifying deployment..."
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n pictive
          
          # Show deployment status
          echo "Deployment status:"
          kubectl get pods -n pictive
          kubectl get services -n pictive
          
          # Show deployment details
          echo "Deployment details:"
          kubectl describe deployment $DEPLOYMENT_NAME -n pictive
          
          # Verify pods are running
          echo "Verifying pods..."
          kubectl get pods -n pictive -o wide
          
          # Check pod logs
          echo "Checking pod logs..."
          kubectl logs -l app=pictive-posts -n pictive
          
          # Get the external IP
          echo "Getting external IP..."
          EXTERNAL_IP=$(kubectl get service pictive-posts-service -n pictive -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "External IP: $EXTERNAL_IP"
          
          # Wait for the external IP to be assigned
          echo "Waiting for external IP to be assigned..."
          while [ -z "$EXTERNAL_IP" ]; do
            sleep 10
            EXTERNAL_IP=$(kubectl get service pictive-posts-service -n pictive -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "External IP: $EXTERNAL_IP"
          done
          
          # Test the API
          echo "Testing API..."
          curl -v http://$EXTERNAL_IP:3001/api/health 